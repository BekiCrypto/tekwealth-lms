from pydantic import BaseModel, Field, EmailStr
from typing import List, Optional, Dict, Any # Any for chat history role/content

from backend.models.enums import QuestionType # For generated question type

# --- AI Chat Schemas ---
class AIChatMessage(BaseModel):
    role: str = Field(..., description="'user' or 'assistant'")
    content: str = Field(..., description="Content of the message")

class AIChatRequest(BaseModel):
    prompt: str = Field(..., min_length=1, description="User's current message or query")
    course_id: Optional[int] = Field(None, description="Optional course ID for context")
    # For now, module_id or content_id are not included, but could be for more specific context.
    chat_history: Optional[List[AIChatMessage]] = Field(None, description="Previous messages in the conversation")

class AIChatResponse(BaseModel):
    ai_message: str = Field(..., description="The AI assistant's response")
    # session_id: Optional[str] = None # If chat sessions are implemented

# --- AI Quiz Generation Schemas ---
class QuizGenerationRequest(BaseModel):
    text_content: str = Field(..., min_length=50, description="Text content to generate quiz questions from")
    num_questions: int = Field(default=3, gt=0, le=10, description="Number of questions to generate")
    # question_type: Optional[QuestionType] = Field(default=QuestionType.MULTIPLE_CHOICE, description="Type of questions to generate") # Currently service defaults to MCQs
    course_id: Optional[int] = Field(None, description="Optional course ID for context or future saving")
    # module_id: Optional[int] = Field(None, description="Optional module ID for context or future saving")


# Schemas for the structure of questions generated by AI
# These are distinct from course_schema.QuestionCreate etc. because they represent raw AI output
# before being processed into actual database-backed Quiz/Question entities.

class GeneratedQuestionOption(BaseModel):
    option_text: str = Field(..., description="Text of the answer option")
    is_correct: bool = Field(..., description="Indicates if this option is the correct answer")

class GeneratedQuestion(BaseModel):
    question_text: str = Field(..., description="Text of the generated question")
    options: List[GeneratedQuestionOption] = Field(..., min_length=2, description="List of answer options for the question")
    question_type: QuestionType = Field(default=QuestionType.MULTIPLE_CHOICE, description="Type of question, e.g., 'multiple_choice'")
    # explanation: Optional[str] = Field(None, description="AI-generated explanation for the answer (optional)") # Could be added

class QuizGenerationResponse(BaseModel):
    generated_questions: List[GeneratedQuestion] = Field(..., description="List of quiz questions generated by AI")
    # request_details: Optional[QuizGenerationRequest] = None # Optionally echo back request params
    message: Optional[str] = "Quiz questions generated successfully."
